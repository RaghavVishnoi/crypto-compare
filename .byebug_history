c
res = @news_details.map{|det| det if det[:id] == params[:id]}.compact.first
res = @news_details.map{|det| det if det[:id] == params[:id]}.compact
res = @news_details.map{|det| det if det[:id] == params[:id]}
res = @news_details.map{|det| det[:id]}
res = @news_details.each{|det| det[:id]}
params[:id]
res
res = @news_details.each{|det| det if det[:id] == params[:id]}
res
res = @news_details.each{|det| det[:id] == params[:id]}
@news_details.each{|det| det[:id] == params[:id]}
@news_details
c
@news_list.count
@news_list
c
@news_list.count
@news_list
c
JSON.parse(response.body)
JSON.parse(response.body)['Data'][0].deep_symbolize_keys
JSON.parse(response.body)['Data'][0].deep_symbolize_key
JSON.parse(response.body)['Data'][0].hash_with_indifferent_access
JSON.parse(response.body)['Data'][0]
JSON.parse(response.body)['Data'].hash_with_indifferent_access
JSON.parse(response.body)['Data']
JSON.parse(response.body)[:Data]
JSON.parse(response.body)
JSON.parse(response.body)[0]
JSON.parse(response.body).hash_with_indifferent_access
JSON.parse(response.body)
c
response.code
JSON.parse(response.body)
response.body
response
c
url
response
c
APP_CONSTANTS
APP_CONSTANTS['min-api']
APP_CONSTANTS['min-api']['base_url']
c
@page_no
c
Time.at(Cryptocompare::News.all[49]['published_on'])
Time.at(Cryptocompare::News.all[49])
Cryptocompare::News.all[49]
Cryptocompare::News.all
Time.at(Cryptocompare::News)
Time.at(Cryptocompare::News(50))
Time.at(Cryptocompare::News.last['published_on'])
Cryptocompare::News.all.count
Time.at(Cryptocompare::News.all.last['published_on'])
Time.at(Cryptocompare::News.all.first['published_on'])
Time.parse(Cryptocompare::News.all.first['published_on'].to_s)
DateTime.parse(Cryptocompare::News.all.first['published_on'].to_s)
DateTime.parse(Cryptocompare::News.all.first['published_on'])
Cryptocompare::News.all.first['published_on'].to_d
Cryptocompare::News.all.first['published_on'].to_date
Cryptocompare::News.all.first['published_on']
Cryptocompare::News.all.first
Cryptocompare::News.all

c
@chart_data
c
@chart_data
c
Time.zone.now
Time.zone.parse(Time.at(JSON.parse(response.body).deep_symbolize_keys[:Data].first[:time]).to_s)
Time.zone = 'Central Time (US & Canada)'
Time.zone.parse(Time.at(JSON.parse(response.body).deep_symbolize_keys[:Data].first[:time]).to_s)
Time.zone.parse(Time.at(JSON.parse(response.body).deep_symbolize_keys[:Data].first[:time]))
Time.zone.iso8601(Time.at(JSON.parse(response.body).deep_symbolize_keys[:Data].first[:time]))
@chart_data = Time.at(JSON.parse(response.body).deep_symbolize_keys[:Data].first[:time]).est
@chart_data = Time.at(JSON.parse(response.body).deep_symbolize_keys[:Data].first[:time])
@chart_data = JSON.parse(response.body).deep_symbolize_keys[:Data].first[:time]
@chart_data = JSON.parse(response.body).deep_symbolize_keys[:Data].first
@chart_data = JSON.parse(response.body).deep_symbolize_keys[:Data]
@chart_data
c
@chart_data.count
@chart_datacount
c
@chart_data.unshift(['Time', 'Close'])
@chart_data
c
@chart_data
c
@chart_data.map{|chart_details| [Time.at(chart_details[:time]).strftime('%Y-%m-%d %H:%M'), chart_details[:close]]}
@chart_data.map{|chart_details| [Time.at(chart_details[:time]).strftime('%Y-%m-%d %HH:%MM'), chart_details[:close]]}
@chart_data.map{|chart_details| [Time.at(chart_details[:time]).strftime('%Y-%m-%d %HH:%MM), chart_details[:close]]}
@chart_data.map{|chart_details| [Time.at(chart_details[:time]), chart_details[:close]]}
@chart_data.map{|chart_details| [chart_details[:time], chart_details[:close]]}
@chart_data.map{|chart_details| chart_details[:time], chart_details[:close]}
@chart_data.first
@chart_data
c
JSON.parse(response.body)['Data']
JSON.parse(response.body)
response.body
response.code
response.status
response
c
@exchange_list[:Exchanges]
@exchange_list
c
@exchange_list
c
JSON.parse(response.body).deep_symbolize_keys[:Data]
exit
response
response.body
response.status
response
response.body
JSON.parse(response.body)
JSON.parse(response.body).deep_symbolize_keys
JSON.parse(response.body).deep_symbolize_keys[:Data]
@exchanges.body
@exchanges. body
@exchanges
@excganges
c
url
c
url
c
url
c
res = @news_details.map{|det| det if det[:id] == params[:id]}.compact.first
res = @news_details.map{|det| det if det[:id] == params[:id]}.compact
res = @news_details.map{|det| det if det[:id] == params[:id]}
res = @news_details.map{|det| det[:id]}
res = @news_details.each{|det| det[:id]}
params[:id]
res
res = @news_details.each{|det| det if det[:id] == params[:id]}
res
res = @news_details.each{|det| det[:id] == params[:id]}
@news_details.each{|det| det[:id] == params[:id]}
@news_details
c
@news_list.count
@news_list
c
@news_list.count
@news_list
c
JSON.parse(response.body)
JSON.parse(response.body)['Data'][0].deep_symbolize_keys
JSON.parse(response.body)['Data'][0].deep_symbolize_key
JSON.parse(response.body)['Data'][0].hash_with_indifferent_access
JSON.parse(response.body)['Data'][0]
JSON.parse(response.body)['Data'].hash_with_indifferent_access
JSON.parse(response.body)['Data']
JSON.parse(response.body)[:Data]
JSON.parse(response.body)
JSON.parse(response.body)[0]
JSON.parse(response.body).hash_with_indifferent_access
JSON.parse(response.body)
c
response.code
JSON.parse(response.body)
response.body
response
c
url
response
c
APP_CONSTANTS
APP_CONSTANTS['min-api']
APP_CONSTANTS['min-api']['base_url']
c
@page_no
c
Time.at(Cryptocompare::News.all[49]['published_on'])
Time.at(Cryptocompare::News.all[49])
Cryptocompare::News.all[49]
Cryptocompare::News.all
Time.at(Cryptocompare::News)
Time.at(Cryptocompare::News(50))
Time.at(Cryptocompare::News.last['published_on'])
Cryptocompare::News.all.count
Time.at(Cryptocompare::News.all.last['published_on'])
Time.at(Cryptocompare::News.all.first['published_on'])
Time.parse(Cryptocompare::News.all.first['published_on'].to_s)
DateTime.parse(Cryptocompare::News.all.first['published_on'].to_s)
DateTime.parse(Cryptocompare::News.all.first['published_on'])
Cryptocompare::News.all.first['published_on'].to_d
Cryptocompare::News.all.first['published_on'].to_date
Cryptocompare::News.all.first['published_on']
Cryptocompare::News.all.first
Cryptocompare::News.all
